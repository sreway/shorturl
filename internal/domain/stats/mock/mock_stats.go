// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/stats/stats.go

// Package statsMock is a generated GoMock package.
package statsMock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	stats "github.com/sreway/shorturl/internal/domain/stats"
)

// MockUserStats is a mock of UserStats interface.
type MockUserStats struct {
	ctrl     *gomock.Controller
	recorder *MockUserStatsMockRecorder
}

// MockUserStatsMockRecorder is the mock recorder for MockUserStats.
type MockUserStatsMockRecorder struct {
	mock *MockUserStats
}

// NewMockUserStats creates a new mock instance.
func NewMockUserStats(ctrl *gomock.Controller) *MockUserStats {
	mock := &MockUserStats{ctrl: ctrl}
	mock.recorder = &MockUserStatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStats) EXPECT() *MockUserStatsMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockUserStats) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockUserStatsMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockUserStats)(nil).Count))
}

// MockURLStats is a mock of URLStats interface.
type MockURLStats struct {
	ctrl     *gomock.Controller
	recorder *MockURLStatsMockRecorder
}

// MockURLStatsMockRecorder is the mock recorder for MockURLStats.
type MockURLStatsMockRecorder struct {
	mock *MockURLStats
}

// NewMockURLStats creates a new mock instance.
func NewMockURLStats(ctrl *gomock.Controller) *MockURLStats {
	mock := &MockURLStats{ctrl: ctrl}
	mock.recorder = &MockURLStatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLStats) EXPECT() *MockURLStatsMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockURLStats) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockURLStatsMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockURLStats)(nil).Count))
}

// MockCollection is a mock of Collection interface.
type MockCollection struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionMockRecorder
}

// MockCollectionMockRecorder is the mock recorder for MockCollection.
type MockCollectionMockRecorder struct {
	mock *MockCollection
}

// NewMockCollection creates a new mock instance.
func NewMockCollection(ctrl *gomock.Controller) *MockCollection {
	mock := &MockCollection{ctrl: ctrl}
	mock.recorder = &MockCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollection) EXPECT() *MockCollectionMockRecorder {
	return m.recorder
}

// URL mocks base method.
func (m *MockCollection) URL() stats.URLStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(stats.URLStats)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockCollectionMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockCollection)(nil).URL))
}

// User mocks base method.
func (m *MockCollection) User() stats.UserStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(stats.UserStats)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockCollectionMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockCollection)(nil).User))
}
