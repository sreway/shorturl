// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/url/url.go

// Package urlMock is a generated GoMock package.
package urlMock

import (
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockURL is a mock of URL interface.
type MockURL struct {
	ctrl     *gomock.Controller
	recorder *MockURLMockRecorder
}

// MockURLMockRecorder is the mock recorder for MockURL.
type MockURLMockRecorder struct {
	mock *MockURL
}

// NewMockURL creates a new mock instance.
func NewMockURL(ctrl *gomock.Controller) *MockURL {
	mock := &MockURL{ctrl: ctrl}
	mock.recorder = &MockURLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURL) EXPECT() *MockURLMockRecorder {
	return m.recorder
}

// CorrelationID mocks base method.
func (m *MockURL) CorrelationID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CorrelationID")
	ret0, _ := ret[0].(string)
	return ret0
}

// CorrelationID indicates an expected call of CorrelationID.
func (mr *MockURLMockRecorder) CorrelationID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CorrelationID", reflect.TypeOf((*MockURL)(nil).CorrelationID))
}

// Deleted mocks base method.
func (m *MockURL) Deleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Deleted indicates an expected call of Deleted.
func (mr *MockURLMockRecorder) Deleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deleted", reflect.TypeOf((*MockURL)(nil).Deleted))
}

// ID mocks base method.
func (m *MockURL) ID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockURLMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockURL)(nil).ID))
}

// LongURL mocks base method.
func (m *MockURL) LongURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LongURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// LongURL indicates an expected call of LongURL.
func (mr *MockURLMockRecorder) LongURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LongURL", reflect.TypeOf((*MockURL)(nil).LongURL))
}

// LongValue mocks base method.
func (m *MockURL) LongValue() url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LongValue")
	ret0, _ := ret[0].(url.URL)
	return ret0
}

// LongValue indicates an expected call of LongValue.
func (mr *MockURLMockRecorder) LongValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LongValue", reflect.TypeOf((*MockURL)(nil).LongValue))
}

// SetCorrelationID mocks base method.
func (m *MockURL) SetCorrelationID(value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCorrelationID", value)
}

// SetCorrelationID indicates an expected call of SetCorrelationID.
func (mr *MockURLMockRecorder) SetCorrelationID(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCorrelationID", reflect.TypeOf((*MockURL)(nil).SetCorrelationID), value)
}

// SetDeleted mocks base method.
func (m *MockURL) SetDeleted(value bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeleted", value)
}

// SetDeleted indicates an expected call of SetDeleted.
func (mr *MockURLMockRecorder) SetDeleted(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeleted", reflect.TypeOf((*MockURL)(nil).SetDeleted), value)
}

// SetLongURL mocks base method.
func (m *MockURL) SetLongURL(value url.URL) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLongURL", value)
}

// SetLongURL indicates an expected call of SetLongURL.
func (mr *MockURLMockRecorder) SetLongURL(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLongURL", reflect.TypeOf((*MockURL)(nil).SetLongURL), value)
}

// SetShortURL mocks base method.
func (m *MockURL) SetShortURL(value url.URL) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetShortURL", value)
}

// SetShortURL indicates an expected call of SetShortURL.
func (mr *MockURLMockRecorder) SetShortURL(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShortURL", reflect.TypeOf((*MockURL)(nil).SetShortURL), value)
}

// ShortURL mocks base method.
func (m *MockURL) ShortURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// ShortURL indicates an expected call of ShortURL.
func (mr *MockURLMockRecorder) ShortURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortURL", reflect.TypeOf((*MockURL)(nil).ShortURL))
}

// ShortValue mocks base method.
func (m *MockURL) ShortValue() url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortValue")
	ret0, _ := ret[0].(url.URL)
	return ret0
}

// ShortValue indicates an expected call of ShortValue.
func (mr *MockURLMockRecorder) ShortValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortValue", reflect.TypeOf((*MockURL)(nil).ShortValue))
}

// UserID mocks base method.
func (m *MockURL) UserID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// UserID indicates an expected call of UserID.
func (mr *MockURLMockRecorder) UserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserID", reflect.TypeOf((*MockURL)(nil).UserID))
}
